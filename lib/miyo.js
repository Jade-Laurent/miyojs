// Generated by CoffeeScript 1.7.1

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */
var Miyo, ShioriJK, fs, jsyaml, path;

if (typeof require !== "undefined" && require !== null) {
  ShioriJK = require('shiorijk');
}

Miyo = (function() {
  function Miyo(dictionary) {
    this.dictionary = dictionary;
    this.filters = {
      miyo_require_filters: function(argument, request) {
        var file, filter, filters, name, path, _i, _len, _ref;
        if (typeof require !== "undefined" && require !== null) {
          path = require('path');
          _ref = argument.miyo_require_filters;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            if (file.match(/^\.*\//)) {
              filters = require(path.join(process.cwd(), file));
            } else {
              filters = require('miyojs-filter-' + file);
            }
            for (name in filters) {
              filter = filters[name];
              this.filters[name] = filter;
            }
          }
        } else if (typeof MiyoFilters !== "undefined" && MiyoFilters !== null) {
          for (name in MiyoFilters) {
            this.filters[name] = MiyoFilters[name];
          }
        } else {
          throw 'miyo_require_filters: filter source not found.';
        }
        return argument;
      }
    };
    this.default_response_headers = {};
    this.value_filters = [];
  }

  Miyo.prototype.load = function(directory) {
    this.shiori_dll_directory = directory;
    return this.call_id('_load', null);
  };

  Miyo.prototype.unload = function() {
    this.call_id('_unload', null);
    if (typeof process !== "undefined" && process !== null) {
      return process.exit();
    }
  };

  Miyo.prototype.request = function(request) {
    var error, response;
    if (request.request_line.version === '3.0') {
      try {
        response = this.call_id(request.headers.get('ID'), request);
        if (!(response instanceof ShioriJK.Message.Response)) {
          response = this.make_value(response, request);
        }
        return "" + response;
      } catch (_error) {
        error = _error;
        return this.make_internal_server_error(error, request);
      }
    } else {
      return this.make_bad_request(request);
    }
  };

  Miyo.prototype.call_id = function(id, request, stash) {
    var entry;
    entry = this.dictionary[id];
    if (request === null) {
      if (entry != null) {
        return this.call_entry(entry, request, id, stash);
      }
    } else {
      return this.call_entry(entry, request, id, stash);
    }
  };

  Miyo.prototype.call_entry = function(entry, request, id, stash) {
    if (entry != null) {
      if (entry instanceof Array) {
        return this.call_list(entry, request, id, stash);
      } else if (entry instanceof Object) {
        return this.call_filters(entry, request, id, stash);
      } else {
        return this.call_value(entry, request, id, stash);
      }
    } else {
      return this.call_not_found(entry, request, id, stash);
    }
  };

  Miyo.prototype.call_value = function(entry, request, id, stash) {
    var filter, filter_name, value, _i, _len, _ref;
    value = entry;
    _ref = this.value_filters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      filter_name = _ref[_i];
      filter = this.filters[filter_name];
      if (filter != null) {
        value = filter.call(this, value, request, id, stash);
      } else {
        throw "value filter [" + filter_name + "] not found";
      }
    }
    return value;
  };

  Miyo.prototype.call_list = function(entry, request, id, stash) {
    return this.call_entry(entry[Math.floor(Math.random() * entry.length)], request, id, stash);
  };

  Miyo.prototype.call_filters = function(entry, request, id, stash) {
    var argument, filter, filter_name, filters, _i, _len;
    argument = entry.argument;
    if (entry.filters instanceof Array) {
      filters = entry.filters;
    } else {
      filters = [entry.filters];
    }
    for (_i = 0, _len = filters.length; _i < _len; _i++) {
      filter_name = filters[_i];
      filter = this.filters[filter_name];
      if (filter != null) {
        argument = filter.call(this, argument, request, id, stash);
      } else {
        throw "filter [" + filter_name + "] not found";
      }
    }
    return argument;
  };

  Miyo.prototype.call_not_found = function(entry, request, id, stash) {
    return this.make_bad_request(request);
  };

  Miyo.prototype.build_response = function() {
    return new ShioriJK.Message.Response();
  };

  Miyo.prototype.make_value = function(value, request) {
    var content, name, response, _ref;
    response = this.build_response();
    response.status_line.protocol = 'SHIORI';
    response.status_line.version = '3.0';
    response.status_line.code = (value != null ? value.length : void 0) ? 200 : 204;
    _ref = this.default_response_headers;
    for (name in _ref) {
      content = _ref[name];
      response.headers.set(name, content);
    }
    if (value != null ? value.length : void 0) {
      response.headers.set('Value', value.replace(/[\r\n]/g, ''));
    }
    return response;
  };

  Miyo.prototype.make_bad_request = function(request) {
    var content, name, response, _ref;
    response = this.build_response();
    response.status_line.protocol = 'SHIORI';
    response.status_line.version = '3.0';
    response.status_line.code = 400;
    _ref = this.default_response_headers;
    for (name in _ref) {
      content = _ref[name];
      response.headers.set(name, content);
    }
    return response;
  };

  Miyo.prototype.make_internal_server_error = function(error, request) {
    var content, name, response, _ref;
    response = this.build_response();
    response.status_line.protocol = 'SHIORI';
    response.status_line.version = '3.0';
    response.status_line.code = 500;
    _ref = this.default_response_headers;
    for (name in _ref) {
      content = _ref[name];
      response.headers.set(name, content);
    }
    if (error) {
      response.headers.set('X-Miyo-Error', ("" + error).replace(/\r/g, '\\r').replace(/\n/g, '\\n'));
    }
    return response;
  };

  return Miyo;

})();

if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
  module.exports = Miyo;
}

if (typeof require !== "undefined" && require !== null) {
  fs = require('fs');
  path = require('path');
  jsyaml = require('js-yaml');
}

Miyo.DictionaryLoader = {
  load_recursive: function(directory) {
    var dictionary, dictionary_part, element, element_path, elements, error, _i, _len;
    dictionary = null;
    elements = fs.readdirSync(directory);
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      element_path = path.join(directory, element);
      dictionary_part = null;
      if (fs.statSync(element_path).isDirectory()) {
        dictionary_part = this.load_recursive(element_path);
      } else if (path.extname(element_path) === '.yaml') {
        dictionary_part = this.load(element_path);
      }
      if (dictionary_part != null) {
        if (dictionary == null) {
          dictionary = {};
        }
        try {
          this.merge_dictionary(dictionary_part, dictionary);
        } catch (_error) {
          error = _error;
          throw "processing directories in [" + element_path + "]\n" + error;
        }
      }
    }
    return dictionary;
  },
  load: function(file) {
    var yaml_str;
    yaml_str = fs.readFileSync(file, 'utf8').replace(/\t/g, ' ');
    return jsyaml.safeLoad(yaml_str);
  },
  merge_dictionary: function(source, destination) {
    var d_entry, d_is_array, id, key, s_entry, s_is_array, value;
    for (id in source) {
      s_entry = source[id];
      if (destination[id] != null) {
        d_entry = destination[id];
        s_is_array = s_entry instanceof Array;
        d_is_array = d_entry instanceof Array;
        if (s_is_array && d_is_array) {
          destination[id] = d_entry.concat(s_entry);
        } else if (!s_is_array && !d_is_array) {
          for (key in s_entry) {
            value = s_entry[key];
            if (d_entry[key] != null) {
              throw "Dictionary Load Error: entry [" + id + "] has duplicated key [" + key + "]";
            } else {
              d_entry[key] = s_entry[key];
            }
          }
        } else {
          throw "Dictionary Load Error: entry [" + id + "] is duplicated and has unmatch contents";
        }
      } else {
        destination[id] = source[id];
      }
    }
  }
};

//# sourceMappingURL=miyo.map
